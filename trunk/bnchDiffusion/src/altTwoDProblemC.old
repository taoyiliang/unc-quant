#include "NOX_Common.H"
#include "Epetra_IntVector.h"
#include "Epetra_Import.h"
#include "Epetra_Operator.h"
#include "Epetra_CrsGraph.h"
#include "Epetra_CrsMatrix.h"
#include "Epetra_VbrMatrix.h"


#include "TwoDProblem.h"

#include "MatProps.h"
#include "MLPrecond.h"
#include "NeutronicsParam.h"

TwoDProblem::TwoDProblem(TwoDMesh &mesh, Epetra_Comm &comm ) :
  _mesh(mesh),
  _comm(comm),
  _keff(1),
  _left_bc(VACUUM),
  _right_bc(VACUUM),
  _top_bc(VACUUM),
  _bottom_bc(VACUUM),
  _nca_flag(false)
{
  //std::cout<<"ncells: "<<_mesh.ncells<<std::endl;
  _map      = new Epetra_Map(_mesh.ncells*2,0,comm);
  _face_map = new Epetra_Map(_mesh.ncells*2+1,0,comm);

  _new_soln = Teuchos::rcp(new Epetra_Vector(*_map));
  _new_soln->PutScalar(0.1);

  _old_soln = Teuchos::rcp(new Epetra_Vector(*_new_soln));

  _Jac = Teuchos::rcp(new Epetra_CrsMatrix(Copy, *_map, 5));
  
}

//-----------------------------------------------------------------------------------------
bool TwoDProblem::evaluate(FillType f, const Epetra_Vector* soln, Epetra_Vector* tmp_rhs)
{

  std::cout << "evaluate"<<std::endl;
  
  _flag = f;

  if ( _nca_flag )
    _keff_nl = computeNonlinearKeff(*soln);
  
  ////
  // LO residual function evaluation.
  evaluateResidual(soln, tmp_rhs);

  
  return true;

}

//-------------------------------------------------------------------------------------
void TwoDProblem::evaluateResidual(const Epetra_Vector* soln, Epetra_Vector *tmp_rhs)
{
  //std::cout<<"In TwoDProblem::evaluateResidual:"<<std::endl;
  //std::cout<<"i,S,abs,DX,DY"<<endl;
  for (int g=0;g<2;++g)
  {
    for(int icell=0;icell< _mesh.ncells;++icell)
    {
      std::vector<int> ij=_mesh.ij(icell);
      int i=ij[0];
      int j=ij[1];

      std::vector<int> gid_ctr;
      gid_ctr.push_back(_mesh.gid(i,j,0));
      gid_ctr.push_back(_mesh.gid(i,j,1));
      //std::cout<<"check "<<gid_ctr[0]<<" "<<gid_ctr[1]<<std::endl;
      double source(0);
      double removal = _mesh.cells[icell].mtl->siga[g]*(*soln)[gid_ctr[g]];
      double scatt = _mesh.cells[icell].mtl->sigtr[0]*(*soln)[gid_ctr[0]];
      //if ( (*soln)[gid_ctr[g]]<0)
      //std::cout<<"ERROR negative flux: "<<i<<" "<<j<<" "<<g<<" "<<(*soln)[gid_ctr[g]]<<"\n";
      //std::cout<<"check: "<<i<<" "<<j<<" "<<_mesh.cells[icell].ix<<" "<<_mesh.cells[icell].iy<<std::endl;
 
      if (g==0)
      {
        removal += scatt;
        if (_nca_flag)
        {
          source =  _mesh.cells[icell].mtl->nsigf[0]*(*soln)[gid_ctr[0]]/_keff_nl;
          source += _mesh.cells[icell].mtl->nsigf[1]*(*soln)[gid_ctr[1]]/_keff_nl;
        }
        else
        {
          source =  _mesh.cells[icell].mtl->nsigf[0]*(*_old_soln)[gid_ctr[0]]/_keff;
          source += _mesh.cells[icell].mtl->nsigf[1]*(*_old_soln)[gid_ctr[1]]/_keff;
        }
      }
      else if (g==1)
      {
        source = scatt;
      }
      else
      {
        std::cout<<"This is a problem!  g not in (0,1): "<<g<<std::endl;
        std::cin.get();
      }


      //double currentX = computeCurrentX(icell,g,soln);
      //double currentY = computeCurrentY(icell,g,soln);
      double current = computeCurrent(icell,g,soln);
      //std::cout<<"cur rem src: "<<i<<" "<<j<<" "<<g<<" "<<current<<" ";
      //std::cout<<removal<<" "<<source<<std::endl;
      (*tmp_rhs)[gid_ctr[g]] =  current + removal - source;
      //std::cout<<"end   g,i,j: "<<g<<" "<<i<<" "<<j<<std::endl;
    }//icell
  }
  return;
}


//----------------------------------------------------------
double TwoDProblem::computeKeff(const Epetra_Vector *soln)
{
  ////
  // assuming (1/k)*nsigf[0]*phi is normalized to one.
  double fission_src = 0;
  for(int icell =0;icell<_mesh.ncells;++icell)
  {
    int i,j;
    std::vector<int> ij=_mesh.ij(icell);
    i=ij[0];
    j=ij[1];
    double dx = _mesh.cells[icell].dx;
    double dy = _mesh.cells[icell].dy;
    for (int g=0;g<2;++g)
    {
      int curGID=_mesh.gid(i,j,g);
      fission_src += _mesh.cells[icell].mtl->nsigf[g]*(*soln)[curGID]*dx*dy;
    }
  }

  return fission_src;
  
}

//----------------------------------------------------------
double TwoDProblem::computeNonlinearKeff(const Epetra_Vector &soln)
{
  double fission_src = 0;
  for ( int icell = 0; icell<_mesh.ncells;++icell)
  {
    int i,j;
    std::vector<int> ij=_mesh.ij(icell);
    i=ij[0];
    j=ij[1];
    double dx = _mesh.cells[icell].dx;
    double dy = _mesh.cells[icell].dy;
    for (int g=0;g<2;++g)
    {
      int curGID=_mesh.gid(i,j,g);
      fission_src += _mesh.cells[icell].mtl->nsigf[g]*soln[curGID]*dx*dy;
    }
  }
  return fission_src;
}

//-------------------------------------------------------
double TwoDProblem::computeFissionSourceStrength(double keff, const Epetra_Vector *soln)
{
  ////
  // assuming (1/k)*nsigf[0]*phi is normalized to one.
  double fission_src = 0;
  for(int icell =0;icell<_mesh.ncells;++icell)
  {
    int i,j;
    std::vector<int> ij=_mesh.ij(icell);
    i=ij[0];
    j=ij[1];
    double dx = _mesh.cells[icell].dx;
    double dy = _mesh.cells[icell].dy;
    for (int g=0;g<2;++g)
    {
      int curGID=_mesh.gid(i,j,g);
      fission_src += _mesh.cells[icell].mtl->nsigf[g]*(*soln)[curGID]*dx*dy;
    }
  }
  return fission_src/keff;
  
}

//--------------------------------------------------------------------------
double TwoDProblem::computeCurrent(int icell, int g, const Epetra_Vector * soln)
{
  Cell * cellC;
  Cell * cellR;
  Cell * cellL;
  Cell * cellT;
  Cell * cellB;
  cellC = &(_mesh.cells[icell]);

  double dx,dy;
  double dxR,dxL;
  double dyT,dyB;

  double Dr, Dl, Dc, Db, Dt;
  double Pr, Pl, Pc, Pb, Pt;

  //std::cout<<"\n\ngot here\n\n"<<std::endl;
  double nX = _mesh.nX;
  double nY = _mesh.nY;

  int i = cellC->ix;
  int j = cellC->iy;

  //set IDs
  int gc,gl,gr,gb,gt; //global ids
  int cc,cl,cr,cb,ct; //cell ids

  cc = _mesh.cid(i,j);
  gc = _mesh.gid(i,j,g);

  if (i==0){
    cl = _mesh.cid(i,j);
    gl = _mesh.gid(i,j,g);
  }
  else{
    cl = _mesh.cid(i-1,j);
    gl = _mesh.gid(i-1,j,g);
  }

  if (i==nX-1){
    cr = _mesh.cid(i,j);
    gr = _mesh.gid(i,j,g);
  }
  else{
    cr = _mesh.cid(i+1,j);
    gr = _mesh.gid(i+1,j,g);
  }

  if (j==0){
    cb = _mesh.cid(i,j);
    gb = _mesh.gid(i,j,g);
  }
  else{
    cb = _mesh.cid(i,j-1);
    gb = _mesh.gid(i,j-1,g);
  }

  if (j==nY-1){
    ct = _mesh.cid(i,j);
    gt = _mesh.gid(i,j,g);
  }
  else{
    ct = _mesh.cid(i,j+1);
    gt = _mesh.gid(i,j+1,g);
  }

  //set cells
  cellL = &_mesh.cells[cl];
  cellR = &_mesh.cells[cr];
  cellB = &_mesh.cells[cb];
  cellT = &_mesh.cells[ct];

  std::cout<<"DEBUG i,j "<<i<<","<<j<<" | ";
  std::cout<<"T: "<<cellT->ix<<","<<cellT->iy<<" | ";
  std::cout<<"B: "<<cellB->ix<<","<<cellB->iy<<" | ";
  std::cout<<"L: "<<cellL->ix<<","<<cellL->iy<<" | ";
  std::cout<<"R: "<<cellR->ix<<","<<cellR->iy<<"\n";
  //set dx,dy
  dx  = cellC->dx;
  dxL = 0.5*(cellL->dx + dx);
  dxR = 0.5*(cellR->dx + dx);
  dy  = cellC->dy;
  dyB = 0.5*(cellB->dy + dy);
  dyT = 0.5*(cellT->dy + dy);

  //set solution, 
  Pc = (*soln)[gc];
  Pl = (*soln)[gl];
  Pr = (*soln)[gr];
  Pb = (*soln)[gb];
  Pt = (*soln)[gt];

  //BCs
  if( i == 0 && _left_bc==REFLECTIVE)
    Pl = Pc;
  else if (i==0 && _left_bc==VACUUM)
    Pl = -Pc*(0.25-cellC->mtl->D[g]/dx)/(0.25+cellC->mtl->D[g]/dx);
  
  if( j == 0 && _bottom_bc==REFLECTIVE)
    Pb = Pc;
  else if (j==0 && _bottom_bc==VACUUM)
    Pb = -Pc*(0.25-cellC->mtl->D[g]/dy)/(0.25+cellC->mtl->D[g]/dy);
  
  if( i == nX-1 && _right_bc==REFLECTIVE)
    Pr = Pc;
  else if (i == nX-1 && _right_bc==VACUUM)
    Pr = -Pc*(0.25-cellC->mtl->D[g]/dx)/(0.25+cellC->mtl->D[g]/dx);
  
  if( j == nY-1 && _top_bc==REFLECTIVE)
    Pt = Pc;
  else if (j == nY-1 && _top_bc==VACUUM)
    Pt = -Pc*(0.25-cellC->mtl->D[g]/dy)/(0.25+cellC->mtl->D[g]/dy);
  

  //set diffusion values
  Dc = cellC->mtl->D[g];
  Dl = 0.5*(cellL->mtl->D[g]+Dc);
  Dr = 0.5*(cellR->mtl->D[g]+Dc);
  Dt = 0.5*(cellT->mtl->D[g]+Dc);
  Db = 0.5*(cellB->mtl->D[g]+Dc);

  //set currents
  double currentX = -(Dr*(Pr-Pc)/dxR + Dl*(Pc-Pl)/dxL)/dx;
  double currentY = -(Dt*(Pt-Pc)/dyT + Db*(Pc-Pb)/dyB)/dy;

  return currentX + currentY;
}

//--------------------------------------------------------------------------
////unused
double TwoDProblem::computeCurrentY(int icell, int g, const Epetra_Vector * soln)
{
  double top_phi, bot_phi;
  
  double dy = _mesh.cells[icell].dy;
  //double dx = _mesh.cells[icell].dx;
  double dy_p,dy_m;

  Cell * cellC;
  Cell * cellT;
  Cell * cellB;

  cellC = &(_mesh.cells[icell]);
  int i = cellC->ix;
  int j = cellC->iy;
  int gid_ctr = _mesh.gid(i,j,g);
  int gid_top,gid_bottom;
  int cid_top,cid_bottom;

  //int ireg = _mesh.reg_id[icell];
  //int reg_r,reg_l;

  double dfn_term = 0;

  if( j == 0 )
  {
    cid_top = _mesh.cid(i,j+1);
    gid_top = _mesh.gid(i,j+1,g);
    cellT = &(_mesh.cells[cid_top]);

    //int reg_r = _mesh.reg_id[icell+1];
    double dy_t  = cellT->dy;
    double dfn_t = (cellT->mtl->D[g]*dy_t + cellC->mtl->D[g]*dy)/(dy_t+dy);
    dy_t = (dy_t + dy)*0.5;
    double ddphidy_t = dfn_t*((*soln)[gid_ctr]-(*soln)[gid_top])/dy_t;

    
    //int reg_l = _mesh.reg_id[icell];
    double dy_b  = dy;
    double dfn_b = cellC->mtl->D[g];//_matprop.dfn[ireg];
    double bottom_phi = -(*soln)[gid_ctr]*(0.25-dfn_b/dy)/(0.25+dfn_b/dy);//vacuum
    double ddphidy_b = dfn_b*((*soln)[gid_ctr]-bottom_phi)/dy_b;
      
    double current = 0.0;

    if( _bottom_bc == VACUUM)
      current = ddphidy_b;
    
    current += ddphidy_t;
    
    
    return current/dy;
    
  }
  else if (j == _mesh.nY-1)
  {
    int cid_bottom = _mesh.cid(i,j-1);
    int gid_bottom = _mesh.gid(i,j-1,g);
    cellB = &(_mesh.cells[cid_bottom]);

    //int reg_l = _mesh.reg_id[icell-1];
    double dy_b = cellB->dy;
    double dfn_b = (cellB->mtl->D[g]*dy_b + cellC->mtl->D[g]*dy)/(dy_b+dy);
    dy_b = (dy_b + dy)*0.5;
    double ddphidy_b = dfn_b*((*soln)[gid_ctr]-(*soln)[gid_bottom])/dy_b;
      
    double dy_t = dy;
    //int reg_r = _mesh.reg_id[icell];
    double dfn_t = cellC->mtl->D[g];

    double top_phi = -(*soln)[gid_ctr]*(0.25-dfn_t/dy)/(0.25+dfn_t/dy);//vacuum
    double ddphidy_t = dfn_t*((*soln)[gid_ctr]-top_phi)/dy_t;
      
    double current = 0.0;

    if( _top_bc == VACUUM )
      current = ddphidy_t;
    
    current += ddphidy_b;
    
    return current/dy;
  }
  else
  {
    int cid_bottom = _mesh.cid(i,j-1);
    int gid_bottom = _mesh.gid(i,j-1,g);
    cellB = &(_mesh.cells[cid_bottom]);
    int cid_top = _mesh.cid(i,j+1);
    int gid_top = _mesh.gid(i,j+1,g);
    cellT = &(_mesh.cells[cid_top]);
    //int reg_l = _mesh.reg_id[icell-1];
    double dy_b  = cellB->dy;
    double dfn_b = (cellB->mtl->D[g]*dy_b + cellC->mtl->D[g]*dy)/(dy_b+dy);
    dy_b = (dy_b + dy)*0.5;
    double ddphidy_b = dfn_b*((*soln)[gid_ctr]-(*soln)[gid_bottom])/dy_b;
      

    //int reg_r = _mesh.reg_id[icell+1];
    double dy_t = cellT->dy;
    double dfn_t = (cellT->mtl->D[g]*dy_t + cellC->mtl->D[g]*dy)/(dy_t+dy);
    dy_t = (dy_t + dy)*0.5;
    double ddphidy_t = dfn_t*((*soln)[gid_ctr]-(*soln)[gid_top])/dy_t;
    
    double current = ddphidy_b + ddphidy_t;
      
    return current/dy;
  }
  
}

//----------------------------------------------------------------------------------------------------------------------
bool TwoDProblem::setupPrecOperator(const Epetra_Vector *x, Epetra_Operator *Prec, Teuchos::ParameterList* precParams)
{
  
  MLPreconditioner *MLPrec = dynamic_cast<MLPreconditioner *>(Prec);
  MLPrec->setup(x);

  return true;
}

//----------------------------------------------------------------------------
void TwoDProblem::createMatrix(const Epetra_Vector *x, Epetra_CrsMatrix *_M)
{
  
  bool DEBUG = false;
  Cell * cellC;
  Cell * cellT;
  Cell * cellB;
  Cell * cellL;
  Cell * cellR;

  for (int g=0;g<2;++g)
  {
    for(int icell=0;icell<_mesh.ncells;++icell)
    {
      int i,j;
      i = _mesh.cells[icell].ix;
      j = _mesh.cells[icell].iy;
      int gid_ctr = _mesh.gid(i,j,g);
      const int gid_bottom = _mesh.gid( i ,j-1,g);
      const int gid_top =    _mesh.gid( i ,j+1,g);
      const int gid_left =   _mesh.gid(i-1, j ,g);
      const int gid_right =  _mesh.gid(i+1, j ,g);
      const int cid_bottom = _mesh.cid( i ,j-1);
      const int cid_top =    _mesh.cid( i ,j+1);
      const int cid_left =   _mesh.cid(i-1, j );
      const int cid_right =  _mesh.cid(i+1, j );
      cellC = &(_mesh.cells[icell]);
      cellB = &(_mesh.cells[cid_bottom]);
      cellT = &(_mesh.cells[cid_top]);
      cellL = &(_mesh.cells[cid_left]);
      cellR = &(_mesh.cells[cid_right]);

      double left_phi, right_phi;
      double bottom_phi, top_phi;

      double dx = cellC->dx;
      double dy = cellC->dy;
      int    nX = _mesh.nX;
      int    nY = _mesh.nY;

      double dfnL,dfnR;
      double dfnC;
      double dfnB,dfnT;


      //removal, source
      double abs(0),src(0);
      if (g==0)
      {
        abs = cellC->mtl->siga[g] + cellC->mtl->sigtr[g];
        src = cellC->mtl->nsigf[g]/_keff;
      }
      else if (g==1)
      {
        abs = cellC->mtl->siga[g];
        src = 0; //downscatter is dependent on group 0 flux
      }
      
      //the following assumes equal spacing and preset boundary conditions!
      if( i == 0 )
      {
        dfnR = -cellR->mtl->D[g]/dx/dx;
        dfnL = cellC->mtl->D[g];
        dfnC = -dfnR;

        if (j == 0)//Left Bottom
        {
      if (DEBUG) std::cout<<"Left Bottom"<<std::endl;
          dfnT = -cellT->mtl->D[g]/dy/dy;
          dfnB = cellC->mtl->D[g];
          dfnC += -dfnT;

          if (_left_bc == VACUUM)
          {
            dfnC+=dfnL*(1+(0.25-dfnL/dx)/(0.25+dfnL/dx))/dx/dx;
          }
          if (_bottom_bc == VACUUM)
          {
            dfnC+=dfnB*(1+(0.25-dfnB/dy)/(0.25+dfnB/dy))/dy/dy;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrR = gid_ctr+1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnR,&gid_right);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnR,&gid_right);
        
          //int gid_ctrT = gid_ctr+nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnT,&gid_top);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnT,&gid_top);
        }
        else if (j == _mesh.nY-1)//Left Top
        {
      if (DEBUG) std::cout<<"Left Top"<<std::endl;
          dfnT = cellC->mtl->D[g];
          dfnB = -cellB->mtl->D[g]/dy/dy;
          dfnC += -dfnB;

          if (_left_bc == VACUUM)
          {
            dfnC+=dfnL*(1+(0.25-dfnL/dx)/(0.25+dfnL/dx))/dx/dx;
          }
          if (_top_bc == VACUUM)
          {
            dfnC+=dfnT*(1+(0.25-dfnT/dy)/(0.25+dfnT/dy))/dy/dy;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrB = gid_ctr-nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);

          //int gid_ctrR = gid_ctr+1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnR,&gid_right);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnR,&gid_right);
        }
        else //Left Interior
        {
      if (DEBUG) std::cout<<"Left Interior"<<std::endl;
          dfnT = -cellT->mtl->D[g]/dy/dy;
          dfnB = -cellB->mtl->D[g]/dy/dy;
          dfnC += -(dfnT+dfnB);

          if (_left_bc == VACUUM)
          {
            dfnC+=dfnL*(1+(0.25-dfnL/dx)/(0.25+dfnL/dx))/dx/dx;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrB = gid_ctr-nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);

          //int gid_ctrR = gid_ctr+1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnR,&gid_right);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnR,&gid_right);
        
          //int gid_ctrT = gid_ctr+nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnT,&gid_top);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnT,&gid_top);
        }
      }
      else if (i == _mesh.nX-1)
      {
        dfnR = cellC->mtl->D[g];
        dfnL = -cellL->mtl->D[g]/dx/dx;
        dfnC = -dfnL;

        if (j == 0)//Right Bottom
        {
      if (DEBUG) std::cout<<"Right Bottom"<<std::endl;
          dfnT = -cellT->mtl->D[g]/dy/dy;
          dfnB = cellC->mtl->D[g];
          dfnC += -dfnT;

          if (_right_bc == VACUUM)
          {
            dfnC+=dfnR*(1+(0.25-dfnR/dx)/(0.25+dfnR/dx))/dx/dx;
          }
          if (_bottom_bc == VACUUM)
          {
            dfnC+=dfnB*(1+(0.25-dfnB/dy)/(0.25+dfnB/dy))/dy/dy;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrL = gid_ctr-1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnL,&gid_left);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnL,&gid_left);
        
          //int gid_ctrT = gid_ctr+nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnT,&gid_top);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnT,&gid_top);
        }
        else if (j == _mesh.nY-1)//Right Top
        {
      if (DEBUG) std::cout<<"Right Top"<<std::endl;
          dfnT = cellC->mtl->D[g];
          dfnB = -cellB->mtl->D[g]/dy/dy;
          dfnC += -dfnB;

          if (_right_bc == VACUUM)
          {
            dfnC+=dfnR*(1+(0.25-dfnR/dx)/(0.25+dfnR/dx))/dx/dx;
          }
          if (_top_bc == VACUUM)
          {
            dfnC+=dfnT*(1+(0.25-dfnT/dy)/(0.25+dfnT/dy))/dy/dy;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrB = gid_ctr-nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);

          //int gid_ctrL = gid_ctr-1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnL,&gid_left);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnL,&gid_left);
        }
        else//Right Interior
        {
      if (DEBUG) std::cout<<"Right Interior"<<std::endl;
          dfnT = -cellT->mtl->D[g]/dy/dy;
          dfnB = -cellB->mtl->D[g]/dy/dy;
          dfnC += -(dfnT+dfnB);

          if (_right_bc == VACUUM)
          {
            dfnC+=dfnR*(1+(0.25-dfnR/dx)/(0.25+dfnR/dx))/dx/dx;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrB = gid_ctr-nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);

          //int gid_ctrL = gid_ctr-1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnL,&gid_left);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnL,&gid_left);
        
          //int gid_ctrT = gid_ctr+nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnT,&gid_top);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnT,&gid_top);
        }
      }
      else
      {
        dfnR = -cellR->mtl->D[g]/dx;
        dfnL = -cellL->mtl->D[g]/dx;
        dfnC = -(dfnR+dfnL)/dx;
        if (j == 0)//Bottom Interior
        {
      if (DEBUG) std::cout<<"Bottom Interior"<<std::endl;
          dfnT = -cellT->mtl->D[g]/dy/dy;
          dfnB = cellC->mtl->D[g];
          dfnC += -dfnT;

          if (_bottom_bc == VACUUM)
          {
            dfnC+=dfnB*(1+(0.25-dfnB/dy)/(0.25+dfnB/dy))/dy/dy;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrL = gid_ctr-1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnL,&gid_left);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnL,&gid_left);
        
          //int gid_ctrR = gid_ctr+1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnR,&gid_right);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnR,&gid_right);
        
          //int gid_ctrT = gid_ctr+nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnT,&gid_top);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnT,&gid_top);
        }
        else if (j == _mesh.nY-1)//Top Interior
        {
      if (DEBUG) std::cout<<"Top Interior"<<std::endl;
          dfnT = cellC->mtl->D[g];
          dfnB = -cellB->mtl->D[g]/dy/dy;
          dfnC += -dfnB;

          if (_top_bc == VACUUM)
          {
            dfnC+=dfnT*(1+(0.25-dfnT/dy)/(0.25+dfnT/dy))/dy/dy;
          }

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrB = gid_ctr-nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);

          //int gid_ctrL = gid_ctr-1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnL,&gid_left);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnL,&gid_left);
        
          //int gid_ctrR = gid_ctr+1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnR,&gid_right);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnR,&gid_right);
        }
        else//Interior Interior
        {
      if (DEBUG) std::cout<<"Total Interior"<<std::endl;
          dfnT =  -cellT->mtl->D[g]/dy/dy;
          dfnB =  -cellB->mtl->D[g]/dy/dy;
          dfnC += -(dfnT+dfnB);

          bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnC,&gid_ctr);

          //int gid_ctrB = gid_ctr-nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnB,&gid_bottom);

          //int gid_ctrL = gid_ctr-1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnL,&gid_left);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnL,&gid_left);
        
          //int gid_ctrR = gid_ctr+1;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnR,&gid_right);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnR,&gid_right);
        
          //int gid_ctrT = gid_ctr+nX;
          fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&dfnT,&gid_top);
          if (fail_flag)
            fail_flag = _M->InsertGlobalValues(gid_ctr,1,&dfnT,&gid_top);
        }
      }
      
      /*double fission_term = 0.0;
      double absorption_term = _matprop.axs[ireg];
      double sum_term = -fission_term + absorption_term;
      */
      bool fail_flag = _M->SumIntoGlobalValues(gid_ctr,1,&abs, &gid_ctr);
      
    }//icell
  }//g
  _M->FillComplete();
  
  return;
}


//------------------------------------------------------
void TwoDProblem::copyOldSolution(Epetra_Vector &soln)
{
  _old_soln->Update(1.0,soln,0.0);

  return;
}


//
void TwoDProblem::setBCs(int left, int right, int bottom, int top)
{
  if( left == 0 )
    _left_bc = VACUUM;
  else
    _left_bc = REFLECTIVE;

  if( right==0 )
    _right_bc = VACUUM;
  else
    _right_bc = REFLECTIVE;

  if( bottom == 0 )
    _bottom_bc = VACUUM;
  else
    _bottom_bc = REFLECTIVE;

  if( top==0 )
    _top_bc = VACUUM;
  else
    _top_bc = REFLECTIVE;

  return;
  
}
